import logging
import asyncio
import random
import time
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∫–∞–Ω–∞–ª–∞
BOT_TOKEN = "7385634728:AAG-twcqVUOFRdqa38G7EAZQlbhN2mO3E8E"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
CHANNEL_ID = "-1002332689318"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∫–∞–Ω–∞–ª–∞

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–ª–µ—Ç–Ω–∏
user_last_message_time = {}
spam_timeout = 600  # 10 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)

# –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
def get_random_response(response_type: str) -> str:
    responses = {
        "start": [
            "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –°–ø–ª–µ—Ç–Ω–∏–∫! üî•\n\n"
            "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è —Å–ø–ª–µ—Ç–Ω—è–º–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ! –ì–æ—Ç–æ–≤ —Å–ª—É—à–∞—Ç—å, –ø–∏—à–∏—Ç–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ!\n\n"
            "üö´ –ö—Ä—É–∂–∫–∏, –∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã Telegram –∑–∞–ø—Ä–µ—â–µ–Ω—ã!"
        ],
        "gossip_sent": [
            "–í–∞—à–∞ —Å–ø–ª–µ—Ç–Ω—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! üî•",
            "–°–ø–ª–µ—Ç–Ω—è —É—à–ª–∞ –≤ –∫–∞–Ω–∞–ª! –ü–æ–¥–æ–∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è! üòè"
        ],
        "spam_detected": [
            "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ø–ª–µ—Ç–Ω—é! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π.",
            "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –°–ª–µ–¥—É—é—â—É—é —Å–ø–ª–µ—Ç–Ω—é –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç."
        ],
        "error": [
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        ]
    }
    return random.choice(responses.get(response_type, ["–û—à–∏–±–∫–∞."]))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def process_start_command(message: types.Message):
    response_text = get_random_response("start")
    await message.answer(response_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–ø–ª–µ—Ç–Ω–∏)
@dp.message(F.text)
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω—Ç–∏—Å–ø–∞–º (10 –º–∏–Ω—É—Ç)
    if user_id in user_last_message_time:
        last_time = user_last_message_time[user_id]
        if current_time - last_time < spam_timeout:
            await message.answer(get_random_response("spam_detected"))
            return

    user_last_message_time[user_id] = current_time  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏

    gossip = message.text.strip()
    if gossip:
        try:
            await bot.send_message(CHANNEL_ID, f"–ù–æ–≤–∞—è —Å–ø–ª–µ—Ç–Ω—è –æ—Ç –∞–Ω–æ–Ω–∏–º–∞: {gossip}")

            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–æ—Å
            await bot.send_poll(
                chat_id=CHANNEL_ID,
                question="–û—Ü–µ–Ω–∏—Ç–µ —Å–ø–ª–µ—Ç–Ω—é:",
                options=["‚úÖ –ü—Ä–∞–≤–¥–∞", "‚ùå –õ–æ–∂—å"],
                is_anonymous=True,
                type="regular"
            )

            await message.answer(get_random_response("gossip_sent"))

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª: {e}")
            await message.answer(get_random_response("error"))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
